\def\filename{tikz-qr}
\ProvidesPackage{\filename}[2021/12/07 version v1.0 Fancy QR-Codes]
\RequirePackage{tikz,qrcode}

\colorlet{qr@fancy@gradient@tl}{teal}
\colorlet{qr@fancy@gradient@br}{purple}

\def\QrColor(#1,#2)[#3,#4]#5{\pgfmathsetmacro\gradient{#1/#3*50+#2/#4*50}\textcolor{qr@fancy@gradient@br!\gradient!qr@fancy@gradient@tl}{#5}}

% O 1 O
% 2 X 3
% O 4 O
\def\GetPattern#1#2#3#4{%
\ifcsname qcc#1#2#3#4\endcsname
   \csname qcc#1#2#3#4\endcsname
\else \textcolor{purple!20!white}{\rule{\qr@modulesize}{\qr@modulesize}}\fi%
}
\tikzset{qrrc/.style={rounded corners=.5\qr@modulesize},qrrd/.style={fill}}

% is larger to be compensated by overlaps
\def\qrm{\dimexpr\qr@modulesize+.15\p@\relax}
\long\def\qr@newpattern#1#2#3#4#5{%
\expandafter\def\csname qcc#1#2#3#4\endcsname{%
   \parbox[b][\qr@modulesize]{\qr@modulesize}{\hskip-.08\p@\relax\smash{\tikz[x=\qrm,y=\qrm,inner sep=\z@,outer sep=\z@]{\path[qrrd] #5;}}}\relax
}}

% .
\qr@newpattern0000{[qrrc](0,0)rectangle(\qrm,\qrm)}
% | | - -
\qr@newpattern1000{(0,\qrm)[qrrc] -- (0,0) -- (\qrm,0)[sharp corners] -- (\qrm,\qrm) -- cycle}
\qr@newpattern0001{(0,0)[qrrc] -- (0,\qrm) -- (\qrm,\qrm)[sharp corners] -- (\qrm,0) -- cycle}
\qr@newpattern0100{(0,0)[qrrc] -- (\qrm,0) -- (\qrm,\qrm)[sharp corners] -- (0,\qrm) -- cycle}
\qr@newpattern0010{(\qrm,0)[qrrc] -- (0,0) -- (0,\qrm)[sharp corners] -- (\qrm,\qrm) -- cycle}
% corners
\qr@newpattern1100{(\qrm,\qrm)[qrrc] -- (\qrm,0)[sharp corners] -- (0,0) -- (0,\qrm) -- cycle}% top left
\qr@newpattern1010{(0,\qrm)[qrrc] -- (0,0)[sharp corners] -- (\qrm,0) -- (\qrm,\qrm) -- cycle}% top right
\qr@newpattern0101{(0,\qrm)[qrrc] -- (\qrm,\qrm)[sharp corners] -- (\qrm,0) -- (0,0) -- cycle}% bottom left
\qr@newpattern0011{(0,0)[qrrc] -- (0,\qrm)[sharp corners] -- (\qrm,\qrm) -- (\qrm,0) -- cycle}% bottom right
% straights | --
\qr@newpattern1001{(0,0)rectangle(\qrm,\qrm)}
\qr@newpattern0110{(0,0)rectangle(\qrm,\qrm)}
% enclosed
\qr@newpattern1111{(0,0)rectangle(\qrm,\qrm)}
% t's
\qr@newpattern0111{(0,0)rectangle(\qrm,\qrm)}
\qr@newpattern1011{(0,0)rectangle(\qrm,\qrm)}
\qr@newpattern1101{(0,0)rectangle(\qrm,\qrm)}
\qr@newpattern1110{(0,0)rectangle(\qrm,\qrm)}

\def\FancyQrLoad#1{\let\@tmp\newpattern\let\newpattern\qr@newpattern\input{tikzqr-style-#1.code}\let\newpattern\@tmp\let\@tmp\relax}


% modify the getter so everything that is not defined is white:
\def\fancy@qr@matrixentry#1#2#3{%
\ifcsname #1@#2@#3\endcsname%
% #1 = matrix name
% #2 = row number
% #3 = column number
\csname #1@#2@#3\endcsname%
\else\qr@white@format\fi%
}%

\def\FancyQrDoNotPrintSquare#1#2{\def\fancy@qr@donotprint@center@x{#1}\def\fancy@qr@donotprint@center@y{#2}}
\FancyQrDoNotPrintSquare{0}{0}

\newif\iffancy@qr@do@print@
\def\qr@fancy@updateif#1#2{\fancy@qr@do@print@true
\ifnum#1>\@do@y@min\relax \ifnum#1<\@do@y@max\relax \ifnum#2>\@do@x@min\relax \ifnum#2<\@do@x@max\relax \fancy@qr@do@print@false \fi\fi\fi\fi}

\newif\iffancy@qr@roundcut@
\fancy@qr@roundcut@true
\let\FancyQrHardCut\fancy@qr@roundcut@false
\let\FancyQrRoundCut\fancy@qr@roundcut@true

% clear plus if not to be printed
\def\qr@fancy@clear@surround#1#2#3{%
\qr@fancy@updateif{\the\numexpr#2-1}{#3}%
\iffancy@qr@do@print@\else \expandafter\let\csname #1@\the\numexpr#2-1 @#3\endcsname\@undefined \fi
\qr@fancy@updateif{\the\numexpr#2+1}{#3}%
\iffancy@qr@do@print@\else \expandafter\let\csname #1@\the\numexpr#2+1 @#3\endcsname\@undefined \fi
\qr@fancy@updateif{#2}{\the\numexpr#3-1}%
\iffancy@qr@do@print@\else \expandafter\let\csname #1@#2@\the\numexpr#3-1\endcsname\@undefined \fi
\qr@fancy@updateif{#2}{\the\numexpr#3+1}%
\iffancy@qr@do@print@\else \expandafter\let\csname #1@#2@\the\numexpr#3+1\endcsname\@undefined \fi
}

\def\fancy@qr@printmatrix#1{%
   \edef\qr@white{0}\edef\qr@black{1}%
   \let\qr@black@fixed\qr@black
   \let\qr@white@fixed\qr@white
   \let\qr@black@format\qr@black
   \let\qr@white@format\qr@white
  %Set module size
  \setlength{\qr@modulesize}{\qr@desiredheight}%
  \divide\qr@modulesize by \qr@size\relax%
  %
  \setlength{\qr@minipagewidth}{\qr@modulesize}%
  \multiply\qr@minipagewidth by \qr@size\relax%
  \ifqr@tight
  \else
    \advance\qr@minipagewidth by 8\qr@modulesize%
  \fi
   \begin{minipage}{\qr@minipagewidth}%
      \baselineskip=\qr@modulesize%
      \ifqr@tight\else\rule\z@{4\qr@modulesize}\par\fi% %Blank space at top.
      \edef\@max@x{\qr@numberofrowsinmatrix{#1}}%
      \edef\@max@y{\qr@numberofcolsinmatrix{#1}}%
      \pgfmathsetmacro\@do@x@min{int(\@max@x/2-\fancy@qr@donotprint@center@x + 1)}%
      \pgfmathsetmacro\@do@x@max{int(\@max@x/2+\fancy@qr@donotprint@center@x + 1)}%
      \pgfmathsetmacro\@do@y@min{int(\@max@y/2-\fancy@qr@donotprint@center@y + 1)}%
      \pgfmathsetmacro\@do@y@max{int(\@max@y/2+\fancy@qr@donotprint@center@y + 1)}%
      \qr@for \i = 1 to \@max@y by 1{%
      \ifqr@tight\else\rule{4\qr@modulesize}\z@\fi% %Blank space at left.
      \qr@for \j = 1 to \@max@x by 1{%
         \qr@fancy@updateif{\i}{\j}%
         \iffancy@qr@do@print@
         \edef\@mid{\qr@matrixentry{#1}{\the\i}{\the\j}}%
         \ifnum\@mid=\qr@white
            \rule\qr@modulesize\z@
         \else% if not white, get its pattern
            \iffancy@qr@roundcut@\qr@fancy@clear@surround{#1}{\the\i}{\the\j}\fi%
            \edef\@up{\qr@matrixentry{#1}{\the\numexpr\the\i-1}{\the\j}}%
            \edef\@left{\qr@matrixentry{#1}{\the\i}{\the\numexpr\the\j-1}}%
            \edef\@right{\qr@matrixentry{#1}{\the\i}{\the\numexpr\the\j+1}}%
            \edef\@down{\qr@matrixentry{#1}{\the\numexpr\the\i+1}{\the\j}}%
            \QrColor(\the\j,\the\i)[\@max@y,\@max@x]{\GetPattern{\@up}{\@left}{\@right}{\@down}}%
         \fi\else \rule\qr@modulesize\z@\fi
      }\par}%
      \ifqr@tight\else\rule\z@{4\qr@modulesize}\par\fi%
   \end{minipage}%
}%

\def\fancy@qr@setup#1{%
   \qr@createsquareblankmatrix{#1}{\qr@size}%
   \qr@placefinderpatterns{#1}%
   \qr@placetimingpatterns{#1}%
   \qr@placealignmentpatterns{#1}%
   \qr@placedummyformatpatterns{#1}%
   \qr@placedummyversionpatterns{#1}%
}

\newcount\c@fancy@a
\newcount\c@fancy@b
% the normal data is... well...
\def\fancy@qr@writedata#1#2{%
  % #1 = name of a matrix that has been prepared with finder patterns, timing patterns, etc.
  % #2 = a string consisting of 0's and 1's to write into the matrix.
  \expandafter\c@fancy@a\the\numexpr\qr@numberofrowsinmatrix{#1}\relax
  \expandafter\c@fancy@b\the\numexpr\qr@numberofcolsinmatrix{#1}\relax
  \edef\qr@datatowrite{#2\relax}%
  \c@qr@i0
  \@whilenum\c@qr@i<\c@fancy@a\do{%
      \c@qr@j0 \stepcounter{qr@i}\relax
      \@whilenum\c@qr@j<\c@fancy@b\do{%
         \stepcounter{qr@j}\relax
         \expandafter\qr@writebit\expandafter(\qr@datatowrite){#1}%
      }
  }%
}%

\def\fancy@qr@printsavedbinarymatrix#1{%
\def\qr@binarystring{#1\relax\relax}%
\fancy@qr@setup{@tmp}%
\fancy@qr@writedata{@tmp}{\qr@binarystring}%
\fancy@qr@printmatrix{@tmp}%
}%


\def\@fancyqr@wrap#1{{\let\qr@printsavedbinarymatrix\fancy@qr@printsavedbinarymatrix\let\qr@matrixentry\fancy@qr@matrixentry\let\qr@printmatrix\fancy@qr@printmatrix#1}}
\def\fancyqr{\@ifstar\@fancyqr\@@fancyqr}
\newcommand*\@fancyqr[2][]{\@fancyqr@wrap{\qrcode*[#1]{#2}}}
\newcommand*\@@fancyqr[2][]{\@fancyqr@wrap{\qrcode[#1]{#2}}}
\endinput